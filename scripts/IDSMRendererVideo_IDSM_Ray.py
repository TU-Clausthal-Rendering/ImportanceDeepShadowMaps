from pathlib import WindowsPath, PosixPath
from falcor import *

def render_graph_IDSM_COMP():
    g = RenderGraph('IDSM_Demo')
    g.create_pass('IDSM_AS', 'IDSMRenderer', {'RenderMode': 'DirectRT+RayReflections', 'ShadowMethod': 'IDSM-AS', 'EnableMask': True})
    g.create_pass('DLSSPassAS', 'DLSSPass', {'enabled': True, 'outputSize': 'Default', 'profile': 'DLAA', 'preset': 'Default(CNN)', 'motionVectorScale': 'Relative', 'isHDR': True, 'useJitteredMV': False, 'sharpness': 0.0, 'exposure': 0.0})
    g.create_pass('VideoRecorder', 'VideoRecorder', {})
    g.create_pass('PathBenchmark', 'PathBenchmark', {})
    g.create_pass('ParticlePass', 'ParticlePass', {})
    g.create_pass('ToneMapperAS', 'ToneMapper', {'outputSize': 'Default', 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': 'Aces', 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': 'AperturePriority'})
    g.create_pass('IDSM_LL', 'IDSMRenderer', {'RenderMode': 'DirectRT+RayReflections', 'ShadowMethod': 'IDSM-LL', 'EnableMask': True})
    g.create_pass('RayRef', 'IDSMRenderer', {'RenderMode': 'DirectRT+RayReflections', 'ShadowMethod': 'RayTracing', 'EnableMask': False})
    g.create_pass('DLSSPassLL', 'DLSSPass', {'enabled': True, 'outputSize': 'Default', 'profile': 'DLAA', 'preset': 'Default(CNN)', 'motionVectorScale': 'Relative', 'isHDR': True, 'useJitteredMV': False, 'sharpness': 0.0, 'exposure': 0.0})
    g.create_pass('DLSSPassRay', 'DLSSPass', {'enabled': True, 'outputSize': 'Default', 'profile': 'DLAA', 'preset': 'Default(CNN)', 'motionVectorScale': 'Relative', 'isHDR': True, 'useJitteredMV': False, 'sharpness': 0.0, 'exposure': 0.0})
    g.create_pass('ToneMapperLL', 'ToneMapper', {'outputSize': 'Default', 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': 'Aces', 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': 'AperturePriority'})
    g.create_pass('ToneMapperRay', 'ToneMapper', {'outputSize': 'Default', 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': 'Aces', 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': 'AperturePriority'})
    g.add_edge('IDSM_AS.outDepth', 'DLSSPassAS.depth')
    g.add_edge('IDSM_AS.outMotion', 'DLSSPassAS.mvec')
    g.add_edge('IDSM_AS.outColor', 'DLSSPassAS.color')
    g.add_edge('VideoRecorder', 'PathBenchmark')
    g.add_edge('PathBenchmark', 'IDSM_AS')
    g.add_edge('ParticlePass', 'VideoRecorder')
    g.add_edge('DLSSPassAS.output', 'ToneMapperAS.src')
    g.add_edge('IDSM_LL.outColor', 'DLSSPassLL.color')
    g.add_edge('IDSM_LL.outDepth', 'DLSSPassLL.depth')
    g.add_edge('IDSM_LL.outMotion', 'DLSSPassLL.mvec')
    g.add_edge('RayRef.outColor', 'DLSSPassRay.color')
    g.add_edge('RayRef.outDepth', 'DLSSPassRay.depth')
    g.add_edge('RayRef.outMotion', 'DLSSPassRay.mvec')
    g.add_edge('DLSSPassLL.output', 'ToneMapperLL.src')
    g.add_edge('DLSSPassRay.output', 'ToneMapperRay.src')
    g.mark_output('ToneMapperAS.dst')
    g.mark_output('ToneMapperLL.dst')
    g.mark_output('ToneMapperRay.dst')
    return g

IDSM_Comp = render_graph_IDSM_COMP()
try: m.addGraph(IDSM_Comp)
except NameError: None
