from pathlib import WindowsPath, PosixPath
from falcor import *

def render_graph_IDSM_Comp():
    g = RenderGraph('IDSM_Demo')
    g.create_pass('IDSM_AS', 'IDSMRenderer', {'RenderMode': 'DirectRT+RayReflections', 'ShadowMethod': 'IDSM-AS', 'EnableMask': True, 'ShadowResolution': 512})
    g.create_pass('DLSS_IDSM_AS', 'DLSSPass', {'enabled': True, 'outputSize': 'Default', 'profile': 'DLAA', 'preset': 'Default(CNN)', 'motionVectorScale': 'Relative', 'isHDR': True, 'useJitteredMV': False, 'sharpness': 0.0, 'exposure': 0.0})
    g.create_pass('VideoRecorder', 'VideoRecorder', {})
    g.create_pass('PathBenchmark', 'PathBenchmark', {})
    g.create_pass('ParticlePass', 'ParticlePass', {})
    g.create_pass('ToneMapper_IDSM_AS', 'ToneMapper', {'outputSize': 'Default', 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': 'Aces', 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': 'AperturePriority'})
    g.create_pass('DSM_AS', 'IDSMRenderer', {'RenderMode': 'DirectRT+RayReflections', 'ShadowMethod': 'DSM-AS', 'EnableMask': True, 'ShadowResolution': 2048})
    g.create_pass('DSM_LL', 'IDSMRenderer', {'RenderMode': 'DirectRT+RayReflections', 'ShadowMethod': 'DSM-LL', 'EnableMask': True, 'ShadowResolution': 2048})
    g.create_pass('IDSM_LL', 'IDSMRenderer', {'RenderMode': 'DirectRT+RayReflections', 'ShadowMethod': 'IDSM-LL', 'EnableMask': True, 'ShadowResolution': 512})
    g.create_pass('DLSS_DSM_AS', 'DLSSPass', {'enabled': True, 'outputSize': 'Default', 'profile': 'DLAA', 'preset': 'Default(CNN)', 'motionVectorScale': 'Relative', 'isHDR': True, 'useJitteredMV': False, 'sharpness': 0.0, 'exposure': 0.0})
    g.create_pass('DLSS_DSM_LL', 'DLSSPass', {'enabled': True, 'outputSize': 'Default', 'profile': 'DLAA', 'preset': 'Default(CNN)', 'motionVectorScale': 'Relative', 'isHDR': True, 'useJitteredMV': False, 'sharpness': 0.0, 'exposure': 0.0})
    g.create_pass('DLSS_IDSM_LL', 'DLSSPass', {'enabled': True, 'outputSize': 'Default', 'profile': 'DLAA', 'preset': 'Default(CNN)', 'motionVectorScale': 'Relative', 'isHDR': True, 'useJitteredMV': False, 'sharpness': 0.0, 'exposure': 0.0})
    g.create_pass('ToneMapper_DSM_AS', 'ToneMapper', {'outputSize': 'Default', 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': 'Aces', 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': 'AperturePriority'})
    g.create_pass('ToneMapper_DSM_LL', 'ToneMapper', {'outputSize': 'Default', 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': 'Aces', 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': 'AperturePriority'})
    g.create_pass('ToneMapper_IDSM_LL', 'ToneMapper', {'outputSize': 'Default', 'useSceneMetadata': True, 'exposureCompensation': 0.0, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': 'Aces', 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': 'AperturePriority'})
    g.add_edge('IDSM_AS.outDepth', 'DLSS_IDSM_AS.depth')
    g.add_edge('IDSM_AS.outMotion', 'DLSS_IDSM_AS.mvec')
    g.add_edge('IDSM_AS.outColor', 'DLSS_IDSM_AS.color')
    g.add_edge('VideoRecorder', 'PathBenchmark')
    g.add_edge('PathBenchmark', 'IDSM_AS')
    g.add_edge('ParticlePass', 'VideoRecorder')
    g.add_edge('DLSS_IDSM_AS.output', 'ToneMapper_IDSM_AS.src')
    g.add_edge('DSM_AS.outColor', 'DLSS_DSM_AS.color')
    g.add_edge('DSM_AS.outDepth', 'DLSS_DSM_AS.depth')
    g.add_edge('DSM_AS.outMotion', 'DLSS_DSM_AS.mvec')
    g.add_edge('DSM_LL.outColor', 'DLSS_DSM_LL.color')
    g.add_edge('DSM_LL.outDepth', 'DLSS_DSM_LL.depth')
    g.add_edge('DSM_LL.outMotion', 'DLSS_DSM_LL.mvec')
    g.add_edge('IDSM_LL.outColor', 'DLSS_IDSM_LL.color')
    g.add_edge('IDSM_LL.outDepth', 'DLSS_IDSM_LL.depth')
    g.add_edge('IDSM_LL.outMotion', 'DLSS_IDSM_LL.mvec')
    g.add_edge('DLSS_DSM_AS.output', 'ToneMapper_DSM_AS.src')
    g.add_edge('DLSS_DSM_LL.output', 'ToneMapper_DSM_LL.src')
    g.add_edge('DLSS_IDSM_LL.output', 'ToneMapper_IDSM_LL.src')
    g.mark_output('ToneMapper_IDSM_AS.dst')
    g.mark_output('ToneMapper_DSM_AS.dst')
    g.mark_output('ToneMapper_DSM_LL.dst')
    g.mark_output('ToneMapper_IDSM_LL.dst')
    return g

IDSM_Comp = render_graph_IDSM_Comp()
try: m.addGraph(IDSM_Comp)
except NameError: None
